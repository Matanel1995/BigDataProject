{"ast":null,"code":"var _jsxFileName = \"/Users/rebeccajacoby/Desktop/big_data_project/BigDataProject/client/src/components/WebSocketComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketComponent = ({\n  data\n}) => {\n  _s();\n  const [showRedCircle, setShowRedCircle] = useState(false);\n  const [lastDoc, setLastDoc] = useState(null);\n  useEffect(() => {\n    // Establish WebSocket connection\n    const socket = new WebSocket('ws://localhost:8080');\n\n    // WebSocket onmessage event\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'newMessage') {\n        // Set the state to show the red circle\n        console.log('New message received. Setting showRedCircle to true.');\n        setShowRedCircle(true);\n\n        // Assuming 'newData' is the new message data received from ElasticSearch\n        setLastDoc(JSON.stringify(event.data));\n      }\n    };\n\n    // WebSocket onclose event\n    socket.onclose = () => {\n      console.log('WebSocket connection closed.');\n    };\n\n    // WebSocket onerror event\n    socket.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n\n    // Clean up the WebSocket connection on component unmount\n    return () => {\n      socket.close();\n    };\n  }, []);\n  console.log('showRedCircle in WebSocketComponent:', showRedCircle);\n\n  // Function to handle data refresh (not needed anymore)\n  const refreshData = () => {\n    setShowRedCircle(false); // Set the state to hide the red circle after refresh\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      data: lastDoc,\n      showRedCircle: showRedCircle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(WebSocketComponent, \"41FUEqhgbtcnBnbFhYIfQtpT/qo=\");\n_c = WebSocketComponent;\nexport default WebSocketComponent;\nvar _c;\n$RefreshReg$(_c, \"WebSocketComponent\");","map":{"version":3,"names":["React","useEffect","useState","Card","jsxDEV","_jsxDEV","WebSocketComponent","data","_s","showRedCircle","setShowRedCircle","lastDoc","setLastDoc","socket","WebSocket","onmessage","event","JSON","parse","type","console","log","stringify","onclose","onerror","error","close","refreshData","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rebeccajacoby/Desktop/big_data_project/BigDataProject/client/src/components/WebSocketComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Card from './Card';\n\nconst WebSocketComponent = ({data}) => {\n  const [showRedCircle, setShowRedCircle] = useState(false);\n  const [lastDoc, setLastDoc] = useState(null);\n\n  useEffect(() => {\n    // Establish WebSocket connection\n    const socket = new WebSocket('ws://localhost:8080');\n\n    // WebSocket onmessage event\n    socket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'newMessage') {\n        // Set the state to show the red circle\n        console.log('New message received. Setting showRedCircle to true.');\n        setShowRedCircle(true);\n\n        // Assuming 'newData' is the new message data received from ElasticSearch\n        setLastDoc(JSON.stringify(event.data));\n      }\n    };\n\n    // WebSocket onclose event\n    socket.onclose = () => {\n      console.log('WebSocket connection closed.');\n    };\n\n    // WebSocket onerror event\n    socket.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    // Clean up the WebSocket connection on component unmount\n    return () => {\n      socket.close();\n    };\n  }, []);\n\n  console.log('showRedCircle in WebSocketComponent:', showRedCircle);\n\n   // Function to handle data refresh (not needed anymore)\n   const refreshData = () => {\n    setShowRedCircle(false); // Set the state to hide the red circle after refresh\n  };\n\n  return (\n    <div>\n      {/* Pass the refreshData function to the Card component  */}\n      <Card data={lastDoc} showRedCircle={showRedCircle}/>\n    </div>\n  );\n};\n\nexport default WebSocketComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,kBAAkB,GAAGA,CAAC;EAACC;AAAI,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,MAAM,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;;IAEnD;IACAD,MAAM,CAACE,SAAS,GAAIC,KAAK,IAAK;MAC5B,MAAMT,IAAI,GAAGU,IAAI,CAACC,KAAK,CAACF,KAAK,CAACT,IAAI,CAAC;MACnC,IAAIA,IAAI,CAACY,IAAI,KAAK,YAAY,EAAE;QAC9B;QACAC,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;QACnEX,gBAAgB,CAAC,IAAI,CAAC;;QAEtB;QACAE,UAAU,CAACK,IAAI,CAACK,SAAS,CAACN,KAAK,CAACT,IAAI,CAAC,CAAC;MACxC;IACF,CAAC;;IAED;IACAM,MAAM,CAACU,OAAO,GAAG,MAAM;MACrBH,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC7C,CAAC;;IAED;IACAR,MAAM,CAACW,OAAO,GAAIC,KAAK,IAAK;MAC1BL,OAAO,CAACK,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C,CAAC;;IAED;IACA,OAAO,MAAM;MACXZ,MAAM,CAACa,KAAK,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENN,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEZ,aAAa,CAAC;;EAEjE;EACA,MAAMkB,WAAW,GAAGA,CAAA,KAAM;IACzBjB,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;EAC3B,CAAC;;EAED,oBACEL,OAAA;IAAAuB,QAAA,eAEEvB,OAAA,CAACF,IAAI;MAACI,IAAI,EAAEI,OAAQ;MAACF,aAAa,EAAEA;IAAc;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;AAEV,CAAC;AAACxB,EAAA,CAlDIF,kBAAkB;AAAA2B,EAAA,GAAlB3B,kBAAkB;AAoDxB,eAAeA,kBAAkB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}