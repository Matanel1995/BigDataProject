{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yarin\\\\BigDataProject\\\\client\\\\src\\\\pages\\\\CardScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Cards from '../components/Cards';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardsScreen = () => {\n  _s();\n  // Sample data for the cards\n  const [showCards, setShowCards] = useState(false);\n  const [events, setEvents] = useState([]);\n  const handleButtonClick = () => {\n    setShowCards(curr => !curr); // This will set the showCards state to true when the button is pressed\n  };\n\n  useEffect(() => {\n    // Function to fetch data from the server\n    const fetchData = async () => {\n      try {\n        const val = 2;\n        const response = await fetch(`http://localhost:8000/geteventsFull?range=${val}`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        // console.log(data)\n        setEvents(data.events);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const getHour = timestamp => {\n    const date = new Date(timestamp);\n    return date.getHours();\n  };\n  const hourCounts = events.reduce((acc, message) => {\n    const hour = getHour(events.time);\n    acc[hour] = (acc[hour] || 0) + 1;\n    return acc;\n  }, {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Cards Screen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleButtonClick,\n        children: \"Show Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), showCards && /*#__PURE__*/_jsxDEV(Cards, {\n      data: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(CardsScreen, \"0tfrAEJ28rlCkl+HVVY/Xw69X1Q=\");\n_c = CardsScreen;\nexport default CardsScreen;\nvar _c;\n$RefreshReg$(_c, \"CardsScreen\");","map":{"version":3,"names":["React","useState","useEffect","Cards","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsxDEV","_jsxDEV","CardsScreen","_s","showCards","setShowCards","events","setEvents","handleButtonClick","curr","fetchData","val","response","fetch","ok","Error","data","json","error","console","getHour","timestamp","date","Date","getHours","hourCounts","reduce","acc","message","hour","time","children","style","display","justifyContent","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/yarin/BigDataProject/client/src/pages/CardScreen.jsx"],"sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport Cards from '../components/Cards';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\n\r\nconst CardsScreen = () => {\r\n  // Sample data for the cards\r\n  const [showCards, setShowCards] = useState(false);\r\n  const [events, setEvents] = useState([]);\r\n  const handleButtonClick = () => {\r\n    setShowCards((curr)=> !curr); // This will set the showCards state to true when the button is pressed\r\n  };\r\n  useEffect(() => {\r\n    // Function to fetch data from the server\r\n    const fetchData = async () => {\r\n      try {\r\n        const val = 2\r\n        const response = await fetch(`http://localhost:8000/geteventsFull?range=${val}`);\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n\r\n        const data = await response.json();\r\n        // console.log(data)\r\n        setEvents(data.events);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n  const getHour = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    return date.getHours();\r\n  };\r\n  const hourCounts = events.reduce((acc, message) => {\r\n    const hour = getHour(events.time);\r\n    acc[hour] = (acc[hour] || 0) + 1;\r\n    return acc;\r\n  }, {})\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n        <h2>Cards Screen</h2>\r\n      </div>\r\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n        <button onClick={handleButtonClick}>Show Cards</button>  \r\n      </div>\r\n      {showCards && <Cards data={events} />} {/* The Cards component will only render if showCards is true */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardsScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}