{"ast":null,"code":"var _jsxFileName = \"/Users/rebeccajacoby/Desktop/big_data_project/BigDataProject/client/src/components/Card.jsx\";\n// Card.js\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardStyle = {\n  color: 'gray',\n  padding: '70px 0 0 0' // Add 20px padding from the top\n};\n\nconst Card = ({\n  data\n}) => {\n  var _parsedData$DEC_RA, _parsedData$DEC_RA2;\n  //   const parsedData = JSON.parse(data) \n  const parsedData = data ? JSON.parse(data) : undefined;\n  console.log(parsedData === null || parsedData === void 0 ? void 0 : parsedData.time);\n  const urgencyColor = (parsedData === null || parsedData === void 0 ? void 0 : parsedData.urgency) > 4 ? 'red' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: cardStyle,\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Last simulated event \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"telescope-name\",\n      children: [\"Telescope Name:  \", parsedData === null || parsedData === void 0 ? void 0 : parsedData.telescopeName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"time\",\n      children: [\"Time: \", parsedData === null || parsedData === void 0 ? void 0 : parsedData.time]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"coordinates\",\n      children: [\"Coordinates: RA : \", parsedData === null || parsedData === void 0 ? void 0 : (_parsedData$DEC_RA = parsedData.DEC_RA) === null || _parsedData$DEC_RA === void 0 ? void 0 : _parsedData$DEC_RA.ra, \", DEC: \", parsedData === null || parsedData === void 0 ? void 0 : (_parsedData$DEC_RA2 = parsedData.DEC_RA) === null || _parsedData$DEC_RA2 === void 0 ? void 0 : _parsedData$DEC_RA2.dec]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"event\",\n      children: [\"Event: \", parsedData === null || parsedData === void 0 ? void 0 : parsedData.event]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: urgencyColor\n      },\n      className: \"urgency\",\n      children: [\"Urgency: \", parsedData === null || parsedData === void 0 ? void 0 : parsedData.urgency]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_c = Card;\nexport default Card;\n\n// import React from 'react';\n// import './Card.css'; // Import the CSS file for styling\n\n// const Card = ({ data, showRedCircle }) => {\n//   console.log('showRedCircle in Card:', showRedCircle); // Add this line\n//   const parsedData = data ? JSON.parse(data) : undefined;\n//   console.log(parsedData?.time);\n//   const urgencyColor = parsedData?.urgency > 4 ? 'red' : '';\n\n//   return (\n//     <div style={{ color: 'gray', position: 'relative' }} className=\"card\">\n//       {/* Conditionally render the red circle based on the showRedCircle prop */}\n//       {showRedCircle && <div className=\"red-circle\" />}\n//       <h2>Last simulated event</h2>\n//       <p className=\"telescope-name\">Telescope Name:  {parsedData?.telescopeName}</p>\n//       <p className=\"time\">Time: {parsedData?.time}</p>\n//       <p className=\"coordinates\">\n//         Coordinates: RA : {parsedData?.DEC_RA?.ra}, DEC: {parsedData?.DEC_RA?.dec}\n//       </p>\n//       <p className=\"event\">Event: {parsedData?.event}</p>\n//       <p style={{ color: urgencyColor }} className=\"urgency\">Urgency: {parsedData?.urgency}</p>\n//     </div>\n//   );\n// };\n\n// export default Card;\n\n// import React from 'react';\n// import './Card.css'; // Import the CSS file for styling\n// import './CircleButton.css'; \n// import { Link } from 'react-router-dom';\n\n// const Card = ({ data, showRedCircle }) => {\n//   console.log('showRedCircle in Card:', showRedCircle); // Add this line\n//   const parsedData = data ? JSON.parse(data) : undefined;\n//   console.log(parsedData?.time);\n//   const urgencyColor = parsedData?.urgency > 4 ? 'red' : '';\n\n//   return (\n//     <div style={{ color: 'gray', position: 'relative' }} className=\"card\">\n//       {/* Conditionally render the red circle based on the showRedCircle prop */}\n//       {showRedCircle && <button className=\"red-circle-button\"></button>}\n//       <h2>Last simulated event</h2>\n//       <p className=\"telescope-name\">Telescope Name:  {parsedData?.telescopeName}</p>\n//       <p className=\"time\">Time: {parsedData?.time}</p>\n//       <p className=\"coordinates\">\n//         Coordinates: RA : {parsedData?.DEC_RA?.ra}, DEC: {parsedData?.DEC_RA?.dec}\n//       </p>\n//       <p className=\"event\">Event: {parsedData?.event}</p>\n//       <p style={{ color: urgencyColor }} className=\"urgency\">Urgency: {parsedData?.urgency}</p>\n//     </div>\n//   );\n// };\n\n// export default Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","cardStyle","color","padding","Card","data","_parsedData$DEC_RA","_parsedData$DEC_RA2","parsedData","JSON","parse","undefined","console","log","time","urgencyColor","urgency","style","className","children","fileName","_jsxFileName","lineNumber","columnNumber","telescopeName","DEC_RA","ra","dec","event","_c","$RefreshReg$"],"sources":["/Users/rebeccajacoby/Desktop/big_data_project/BigDataProject/client/src/components/Card.jsx"],"sourcesContent":["// Card.js\nimport React from 'react';\n\nconst cardStyle = {\n  color: 'gray',\n  padding: '70px 0 0 0', // Add 20px padding from the top\n};\nconst Card = ({ data }) => {\n  //   const parsedData = JSON.parse(data) \n  const parsedData = data ? JSON.parse(data) : undefined;\n  console.log(parsedData?.time);\n  const urgencyColor = parsedData?.urgency > 4 ? 'red' : '';\n  return (\n    <div style={cardStyle} className=\"card\" >\n      <h2>Last simulated event </h2>\n<p className=\"telescope-name\">Telescope Name:  {parsedData?.telescopeName}</p>\n<p className=\"time\">Time: {parsedData?.time}</p>\n<p className=\"coordinates\">\n  Coordinates: RA : {parsedData?.DEC_RA?.ra}, DEC: {parsedData?.DEC_RA?.dec}\n</p>\n<p className=\"event\">Event: {parsedData?.event}</p>\n<p style={{ color: urgencyColor }} className=\"urgency\">Urgency: {parsedData?.urgency}</p>\n    </div>\n  );\n};\n\nexport default Card;\n\n\n\n\n\n\n\n\n\n// import React from 'react';\n// import './Card.css'; // Import the CSS file for styling\n\n// const Card = ({ data, showRedCircle }) => {\n//   console.log('showRedCircle in Card:', showRedCircle); // Add this line\n//   const parsedData = data ? JSON.parse(data) : undefined;\n//   console.log(parsedData?.time);\n//   const urgencyColor = parsedData?.urgency > 4 ? 'red' : '';\n\n//   return (\n//     <div style={{ color: 'gray', position: 'relative' }} className=\"card\">\n//       {/* Conditionally render the red circle based on the showRedCircle prop */}\n//       {showRedCircle && <div className=\"red-circle\" />}\n//       <h2>Last simulated event</h2>\n//       <p className=\"telescope-name\">Telescope Name:  {parsedData?.telescopeName}</p>\n//       <p className=\"time\">Time: {parsedData?.time}</p>\n//       <p className=\"coordinates\">\n//         Coordinates: RA : {parsedData?.DEC_RA?.ra}, DEC: {parsedData?.DEC_RA?.dec}\n//       </p>\n//       <p className=\"event\">Event: {parsedData?.event}</p>\n//       <p style={{ color: urgencyColor }} className=\"urgency\">Urgency: {parsedData?.urgency}</p>\n//     </div>\n//   );\n// };\n\n// export default Card;\n\n\n\n\n// import React from 'react';\n// import './Card.css'; // Import the CSS file for styling\n// import './CircleButton.css'; \n// import { Link } from 'react-router-dom';\n\n// const Card = ({ data, showRedCircle }) => {\n//   console.log('showRedCircle in Card:', showRedCircle); // Add this line\n//   const parsedData = data ? JSON.parse(data) : undefined;\n//   console.log(parsedData?.time);\n//   const urgencyColor = parsedData?.urgency > 4 ? 'red' : '';\n\n//   return (\n//     <div style={{ color: 'gray', position: 'relative' }} className=\"card\">\n//       {/* Conditionally render the red circle based on the showRedCircle prop */}\n//       {showRedCircle && <button className=\"red-circle-button\"></button>}\n//       <h2>Last simulated event</h2>\n//       <p className=\"telescope-name\">Telescope Name:  {parsedData?.telescopeName}</p>\n//       <p className=\"time\">Time: {parsedData?.time}</p>\n//       <p className=\"coordinates\">\n//         Coordinates: RA : {parsedData?.DEC_RA?.ra}, DEC: {parsedData?.DEC_RA?.dec}\n//       </p>\n//       <p className=\"event\">Event: {parsedData?.event}</p>\n//       <p style={{ color: urgencyColor }} className=\"urgency\">Urgency: {parsedData?.urgency}</p>\n//     </div>\n//   );\n// };\n\n// export default Card;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}