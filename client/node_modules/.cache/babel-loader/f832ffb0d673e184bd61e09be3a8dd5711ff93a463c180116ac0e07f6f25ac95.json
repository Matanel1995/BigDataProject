{"ast":null,"code":"var _jsxFileName = \"F:\\\\BigDataProject\\\\client\\\\src\\\\components\\\\PassedChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useTheme } from \"@mui/material\";\nimport { tokens } from \"../theme\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PassedChart = () => {\n  _s();\n  const theme = useTheme();\n  const colors = tokens(theme.palette.mode);\n\n  // const [dataArray, setDataArray] = useState([]);\n\n  const endDate = new Date();\n  const startDate = new Date(endDate);\n  startDate.setDate(startDate.getDate() - 7);\n  const formattedStartDate = formatDate(startDate);\n  const formattedEndDate = formatDate(endDate);\n\n  //get link should look like this : http://localhost:4000/feed?start_date={YYYY-MM-DD}&end_date={YYYY-MM-DD}\n  useEffect(() => {\n    // Function to fetch data from the server\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/feed?start_date=${formattedStartDate}&end_date=${formattedEndDate}`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        console.log(\"TESTTTTTTTTTTTTTT\");\n        console.log(response);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // useEffect(() => {\n  //   // Log the dataArray whenever it changes\n  //   console.log(\"THIS IS DATA ARRAY!!!!\", dataArray);\n  // }, [dataArray]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n// Function to format the date as \"YYYY-MM-DD\"\n_s(PassedChart, \"jATOG4AkPHhSoxJQuC58L/3APZA=\", false, function () {\n  return [useTheme];\n});\n_c = PassedChart;\nfunction formatDate(date) {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\nexport default PassedChart;\nvar _c;\n$RefreshReg$(_c, \"PassedChart\");","map":{"version":3,"names":["React","useEffect","useState","useTheme","tokens","jsxDEV","_jsxDEV","PassedChart","_s","theme","colors","palette","mode","endDate","Date","startDate","setDate","getDate","formattedStartDate","formatDate","formattedEndDate","fetchData","response","fetch","ok","Error","console","log","error","fileName","_jsxFileName","lineNumber","columnNumber","_c","date","year","getFullYear","month","String","getMonth","padStart","day","$RefreshReg$"],"sources":["F:/BigDataProject/client/src/components/PassedChart.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useTheme } from \"@mui/material\";\r\nimport { tokens } from \"../theme\";\r\n\r\nconst PassedChart = () => {\r\n  const theme = useTheme();\r\n  const colors = tokens(theme.palette.mode);\r\n\r\n  // const [dataArray, setDataArray] = useState([]);\r\n\r\n  const endDate = new Date();\r\n  const startDate = new Date(endDate);\r\n  startDate.setDate(startDate.getDate() - 7);\r\n\r\n  const formattedStartDate = formatDate(startDate);\r\n  const formattedEndDate = formatDate(endDate);\r\n\r\n\r\n//get link should look like this : http://localhost:4000/feed?start_date={YYYY-MM-DD}&end_date={YYYY-MM-DD}\r\n  useEffect(() => {\r\n    // Function to fetch data from the server\r\n    const fetchData = async () => {\r\n      try {\r\n\r\n        const response = await fetch(`http://localhost:4000/feed?start_date=${formattedStartDate}&end_date=${formattedEndDate}`);\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        console.log(\"TESTTTTTTTTTTTTTT\");\r\n        console.log(response);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   // Log the dataArray whenever it changes\r\n  //   console.log(\"THIS IS DATA ARRAY!!!!\", dataArray);\r\n  // }, [dataArray]);\r\n\r\n  return (\r\n    <div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Function to format the date as \"YYYY-MM-DD\"\r\nfunction formatDate(date) {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, '0');\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n  return `${year}-${month}-${day}`;\r\n}\r\n\r\nexport default PassedChart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,MAAM,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,KAAK,GAAGN,QAAQ,CAAC,CAAC;EACxB,MAAMO,MAAM,GAAGN,MAAM,CAACK,KAAK,CAACE,OAAO,CAACC,IAAI,CAAC;;EAEzC;;EAEA,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC1B,MAAMC,SAAS,GAAG,IAAID,IAAI,CAACD,OAAO,CAAC;EACnCE,SAAS,CAACC,OAAO,CAACD,SAAS,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;EAE1C,MAAMC,kBAAkB,GAAGC,UAAU,CAACJ,SAAS,CAAC;EAChD,MAAMK,gBAAgB,GAAGD,UAAU,CAACN,OAAO,CAAC;;EAG9C;EACEZ,SAAS,CAAC,MAAM;IACd;IACA,MAAMoB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QAEF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,yCAAwCL,kBAAmB,aAAYE,gBAAiB,EAAC,CAAC;QAExH,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACAC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChCD,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;MACvB,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDP,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;;EAEA,oBACEf,OAAA;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAEV,CAAC;;AAED;AAAAxB,EAAA,CA9CMD,WAAW;EAAA,QACDJ,QAAQ;AAAA;AAAA8B,EAAA,GADlB1B,WAAW;AA+CjB,SAASY,UAAUA,CAACe,IAAI,EAAE;EACxB,MAAMC,IAAI,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC;EAC/B,MAAMC,KAAK,GAAGC,MAAM,CAACJ,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC1D,MAAMC,GAAG,GAAGH,MAAM,CAACJ,IAAI,CAACjB,OAAO,CAAC,CAAC,CAAC,CAACuB,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACnD,OAAQ,GAAEL,IAAK,IAAGE,KAAM,IAAGI,GAAI,EAAC;AAClC;AAEA,eAAelC,WAAW;AAAC,IAAA0B,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}