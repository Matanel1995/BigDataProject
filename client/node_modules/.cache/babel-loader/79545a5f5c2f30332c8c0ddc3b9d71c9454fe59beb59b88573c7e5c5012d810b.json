{"ast":null,"code":"var _jsxFileName = \"/Users/rebeccajacoby/Desktop/big_data_project/BigDataProject/client/src/components/Card.jsx\",\n  _s = $RefreshSig$();\n// // Card.js\n// import React from 'react';\n\n// const Card = ({ data }) => {\n//   //   const parsedData = JSON.parse(data) \n//   const parsedData = data ? JSON.parse(data) : undefined;\n//   console.log(parsedData?.time);\n//   const urgencyColor = parsedData?.urgency > 4 ? 'red' : '';\n//   return (\n//     <div style={{ color: 'gray' }} className=\"card\" >\n//       <h2>Last simulated event </h2>\n//       <p className=\"telescope-name\">Telescope Name:  {parsedData?.telescopeName}</p>\n//       <p className=\"time\">Time: {parsedData?.time}</p>\n//       <p className=\"coordinates\">\n//         Coordinates: RA : {parsedData?.DEC_RA?.ra}, DEC: {parsedData?.DEC_RA?.dec}\n//       </p>\n//       <p className=\"event\">Event: {parsedData?.event}</p>\n//       <p style={{ color: urgencyColor }} className=\"urgency\">Urgency: {parsedData?.urgency}</p>\n//     </div>\n//   );\n// };\n\n// export default Card;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = ({\n  data\n}) => {\n  _s();\n  var _parsedData$DEC_RA, _parsedData$DEC_RA2;\n  const parsedData = data ? JSON.parse(data) : undefined;\n  const [isNewMessage, setIsNewMessage] = useState(false);\n  useEffect(() => {\n    // Fetch the last event from the server to check if it's a new message\n    fetchLastEvent();\n  }, []);\n  const handleNewMessage = () => {\n    // This function will be called when a new message is received\n    setIsNewMessage(true);\n\n    // After some time (you can adjust the delay), reset isNewMessage to false\n    setTimeout(() => {\n      setIsNewMessage(false);\n    }, 5000); // 5000 milliseconds (5 seconds) in this example\n  };\n\n  const fetchLastEvent = async () => {\n    try {\n      const response = await fetch('/getLastEvent');\n      const data = await response.json();\n      if (data && data.lastdoc !== null) {\n        // Check if a new message is received\n        handleNewMessage();\n      }\n    } catch (error) {\n      console.error('Error fetching last event:', error);\n    }\n  };\n  const urgencyColor = (parsedData === null || parsedData === void 0 ? void 0 : parsedData.urgency) > 4 ? 'red' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: 'gray',\n      position: 'relative'\n    },\n    className: \"card\",\n    children: [isNewMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '10px',\n        right: '10px',\n        width: '10px',\n        height: '10px',\n        backgroundColor: 'red',\n        borderRadius: '50%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Last simulated event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"telescope-name\",\n      children: [\"Telescope Name: \", parsedData === null || parsedData === void 0 ? void 0 : parsedData.telescopeName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"time\",\n      children: [\"Time: \", parsedData === null || parsedData === void 0 ? void 0 : parsedData.time]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"coordinates\",\n      children: [\"Coordinates: RA : \", parsedData === null || parsedData === void 0 ? void 0 : (_parsedData$DEC_RA = parsedData.DEC_RA) === null || _parsedData$DEC_RA === void 0 ? void 0 : _parsedData$DEC_RA.ra, \", DEC: \", parsedData === null || parsedData === void 0 ? void 0 : (_parsedData$DEC_RA2 = parsedData.DEC_RA) === null || _parsedData$DEC_RA2 === void 0 ? void 0 : _parsedData$DEC_RA2.dec]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"event\",\n      children: [\"Event: \", parsedData === null || parsedData === void 0 ? void 0 : parsedData.event]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: urgencyColor\n      },\n      className: \"urgency\",\n      children: [\"Urgency: \", parsedData === null || parsedData === void 0 ? void 0 : parsedData.urgency]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Card, \"5UmBHmIM3nthDC5/iGAFWRZdU0Y=\");\n_c = Card;\nexport default Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Card","data","_s","_parsedData$DEC_RA","_parsedData$DEC_RA2","parsedData","JSON","parse","undefined","isNewMessage","setIsNewMessage","fetchLastEvent","handleNewMessage","setTimeout","response","fetch","json","lastdoc","error","console","urgencyColor","urgency","style","color","position","className","children","top","right","width","height","backgroundColor","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","telescopeName","time","DEC_RA","ra","dec","event","_c","$RefreshReg$"],"sources":["/Users/rebeccajacoby/Desktop/big_data_project/BigDataProject/client/src/components/Card.jsx"],"sourcesContent":["// // Card.js\n// import React from 'react';\n\n// const Card = ({ data }) => {\n//   //   const parsedData = JSON.parse(data) \n//   const parsedData = data ? JSON.parse(data) : undefined;\n//   console.log(parsedData?.time);\n//   const urgencyColor = parsedData?.urgency > 4 ? 'red' : '';\n//   return (\n//     <div style={{ color: 'gray' }} className=\"card\" >\n//       <h2>Last simulated event </h2>\n//       <p className=\"telescope-name\">Telescope Name:  {parsedData?.telescopeName}</p>\n//       <p className=\"time\">Time: {parsedData?.time}</p>\n//       <p className=\"coordinates\">\n//         Coordinates: RA : {parsedData?.DEC_RA?.ra}, DEC: {parsedData?.DEC_RA?.dec}\n//       </p>\n//       <p className=\"event\">Event: {parsedData?.event}</p>\n//       <p style={{ color: urgencyColor }} className=\"urgency\">Urgency: {parsedData?.urgency}</p>\n//     </div>\n//   );\n// };\n\n// export default Card;\n\nimport React, { useState, useEffect } from 'react';\n\nconst Card = ({ data }) => {\n  const parsedData = data ? JSON.parse(data) : undefined;\n  const [isNewMessage, setIsNewMessage] = useState(false);\n\n  useEffect(() => {\n    // Fetch the last event from the server to check if it's a new message\n    fetchLastEvent();\n  }, []);\n\n  const handleNewMessage = () => {\n    // This function will be called when a new message is received\n    setIsNewMessage(true);\n\n    // After some time (you can adjust the delay), reset isNewMessage to false\n    setTimeout(() => {\n      setIsNewMessage(false);\n    }, 5000); // 5000 milliseconds (5 seconds) in this example\n  };\n\n  const fetchLastEvent = async () => {\n    try {\n      const response = await fetch('/getLastEvent');\n      const data = await response.json();\n\n      if (data && data.lastdoc !== null) {\n        // Check if a new message is received\n        handleNewMessage();\n      }\n    } catch (error) {\n      console.error('Error fetching last event:', error);\n    }\n  };\n\n  const urgencyColor = parsedData?.urgency > 4 ? 'red' : '';\n  return (\n    <div style={{ color: 'gray', position: 'relative' }} className=\"card\">\n      {isNewMessage && (\n        <div\n          style={{\n            position: 'absolute',\n            top: '10px',\n            right: '10px',\n            width: '10px',\n            height: '10px',\n            backgroundColor: 'red',\n            borderRadius: '50%',\n          }}\n        />\n      )}\n      <h2>Last simulated event</h2>\n      <p className=\"telescope-name\">Telescope Name: {parsedData?.telescopeName}</p>\n      <p className=\"time\">Time: {parsedData?.time}</p>\n      <p className=\"coordinates\">\n        Coordinates: RA : {parsedData?.DEC_RA?.ra}, DEC: {parsedData?.DEC_RA?.dec}\n      </p>\n      <p className=\"event\">Event: {parsedData?.event}</p>\n      <p style={{ color: urgencyColor }} className=\"urgency\">\n        Urgency: {parsedData?.urgency}\n      </p>\n    </div>\n  );\n};\n\nexport default Card;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}