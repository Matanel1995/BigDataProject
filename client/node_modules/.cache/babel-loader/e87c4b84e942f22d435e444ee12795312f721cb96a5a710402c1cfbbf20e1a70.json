{"ast":null,"code":"var _jsxFileName = \"/Users/rebeccajacoby/Desktop/big_data_project/BigDataProject/client/src/components/WebSocketComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Card from './Card';\n// import './CircleButton.css';\nimport './Card.css';\nimport { useTheme, Box } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketComponent = ({\n  data\n}) => {\n  _s();\n  const [showRedCircle, setShowRedCircle] = useState(false);\n  const [newMessageCount, setNewMessageCount] = useState(0);\n  const [newMessage, setNewMessage] = useState(null);\n  useEffect(() => {\n    // Establish WebSocket connection\n    const socket = new WebSocket('ws://localhost:8080');\n    socket.onopen = () => {\n      console.log('WebSocket connection established.');\n    };\n\n    // WebSocket onmessage event\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      console.log('WebSocket message received:', data);\n      if (data && data.type === 'newMessage') {\n        // Set the state to show the red circle\n        console.log('New message received. Setting showRedCircle to true.');\n        setNewMessageCount(prevCount => prevCount + 1);\n        setShowRedCircle(true);\n        setNewMessage(data.message); // Update new message data when received\n      }\n    };\n\n    // WebSocket onclose event\n    socket.onclose = () => {\n      console.log('WebSocket connection closed.');\n    };\n\n    // WebSocket onerror event\n    socket.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n\n    // Clean up the WebSocket connection on component unmount\n    return () => {\n      socket.close();\n    };\n  }, []);\n  const handleRedButtonClick = () => {\n    setShowRedCircle(false);\n    setNewMessageCount(0); // Reset the counter when the button is clicked\n  };\n\n  console.log('showRedCircle in WebSocketComponent:', showRedCircle);\n\n  // return (\n\n  //   <div>\n  //     {/* Pass the refreshData function to the Card component  */}\n  //     <Card data={data}/>\n  //     {showRedCircle && <button className=\"red-circle-button\" onClick={handleRedButtonClick}>Click me</button>}\n  //   </div>\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      children: [showRedCircle && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"red-circle-button\",\n        onClick: handleRedButtonClick,\n        style: {\n          top: '10px',\n          right: '10px'\n        } // Adjust the top and right properties for spacing\n        ,\n        children: newMessageCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        data: newMessage,\n        style: {\n          marginTop: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(WebSocketComponent, \"Aahm9P/auy6w7c93Qq2pVQOSdII=\");\n_c = WebSocketComponent;\nexport default WebSocketComponent;\nvar _c;\n$RefreshReg$(_c, \"WebSocketComponent\");","map":{"version":3,"names":["React","useEffect","useState","Card","useTheme","Box","jsxDEV","_jsxDEV","WebSocketComponent","data","_s","showRedCircle","setShowRedCircle","newMessageCount","setNewMessageCount","newMessage","setNewMessage","socket","WebSocket","onopen","console","log","onmessage","event","JSON","parse","type","prevCount","message","onclose","onerror","error","close","handleRedButtonClick","style","display","flexDirection","alignItems","children","position","className","onClick","top","right","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","_c","$RefreshReg$"],"sources":["/Users/rebeccajacoby/Desktop/big_data_project/BigDataProject/client/src/components/WebSocketComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Card from './Card';\n// import './CircleButton.css';\nimport './Card.css';\nimport { useTheme, Box } from \"@mui/material\";\n\nconst WebSocketComponent = ({ data }) => {\n  const [showRedCircle, setShowRedCircle] = useState(false);\n  const [newMessageCount, setNewMessageCount] = useState(0);\n  const [newMessage, setNewMessage] = useState(null);\n\n  useEffect(() => {\n    // Establish WebSocket connection\n    const socket = new WebSocket('ws://localhost:8080');\n\n    socket.onopen = () => {\n      console.log('WebSocket connection established.');\n    };\n\n    // WebSocket onmessage event\n    socket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      console.log('WebSocket message received:', data);\n      if (data && data.type === 'newMessage') {\n        // Set the state to show the red circle\n        console.log('New message received. Setting showRedCircle to true.');\n        setNewMessageCount(prevCount => prevCount + 1);\n        setShowRedCircle(true);\n        setNewMessage(data.message); // Update new message data when received\n\n      }\n    };\n\n    // WebSocket onclose event\n    socket.onclose = () => {\n      console.log('WebSocket connection closed.');\n    };\n\n    // WebSocket onerror event\n    socket.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    // Clean up the WebSocket connection on component unmount\n    return () => {\n      socket.close();\n    };\n  }, []);\n\n  const handleRedButtonClick = () => {\n    setShowRedCircle(false);\n    setNewMessageCount(0); // Reset the counter when the button is clicked\n  };\n\n  console.log('showRedCircle in WebSocketComponent:', showRedCircle);\n\n\n  // return (\n\n  //   <div>\n  //     {/* Pass the refreshData function to the Card component  */}\n  //     <Card data={data}/>\n  //     {showRedCircle && <button className=\"red-circle-button\" onClick={handleRedButtonClick}>Click me</button>}\n  //   </div>\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <div style={{ position: 'relative' }}>\n        {showRedCircle && (\n          <button\n            className=\"red-circle-button\"\n            onClick={handleRedButtonClick}\n            style={{ top: '10px', right: '10px' }} // Adjust the top and right properties for spacing\n          >\n            {newMessageCount}\n          </button>\n        )}\n        <Card data={newMessage} style={{ marginTop: '20px' }} /> {/* Add margin to create space between the button and the card */}\n      </div>\n    </div>\n  );\n  \n};\n\nexport default WebSocketComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}