{"ast":null,"code":"var _jsxFileName = \"/Users/rebeccajacoby/Desktop/big_data_project/BigDataProject/client/src/components/Card.jsx\";\n// // Card.js\n// import React from 'react';\n\n// const Card = ({ data }) => {\n//   //   const parsedData = JSON.parse(data) \n//   const parsedData = data ? JSON.parse(data) : undefined;\n//   console.log(parsedData?.time);\n//   const urgencyColor = parsedData?.urgency > 4 ? 'red' : '';\n//   return (\n//     <div style={{ color: 'gray' }} className=\"card\" >\n//       <h2>Last simulated event </h2>\n// <p className=\"telescope-name\">Telescope Name:  {parsedData?.telescopeName}</p>\n// <p className=\"time\">Time: {parsedData?.time}</p>\n// <p className=\"coordinates\">\n//   Coordinates: RA : {parsedData?.DEC_RA?.ra}, DEC: {parsedData?.DEC_RA?.dec}\n// </p>\n// <p className=\"event\">Event: {parsedData?.event}</p>\n// <p style={{ color: urgencyColor }} className=\"urgency\">Urgency: {parsedData?.urgency}</p>\n//     </div>\n//   );\n// };\n\n// export default Card;\n\n// import React from 'react';\n// import './Card.css'; // Import the CSS file for styling\n\n// const Card = ({ data, showRedCircle }) => {\n//   console.log('showRedCircle in Card:', showRedCircle); // Add this line\n//   const parsedData = data ? JSON.parse(data) : undefined;\n//   console.log(parsedData?.time);\n//   const urgencyColor = parsedData?.urgency > 4 ? 'red' : '';\n\n//   return (\n//     <div style={{ color: 'gray', position: 'relative' }} className=\"card\">\n//       {/* Conditionally render the red circle based on the showRedCircle prop */}\n//       {showRedCircle && <div className=\"red-circle\" />}\n//       <h2>Last simulated event</h2>\n//       <p className=\"telescope-name\">Telescope Name:  {parsedData?.telescopeName}</p>\n//       <p className=\"time\">Time: {parsedData?.time}</p>\n//       <p className=\"coordinates\">\n//         Coordinates: RA : {parsedData?.DEC_RA?.ra}, DEC: {parsedData?.DEC_RA?.dec}\n//       </p>\n//       <p className=\"event\">Event: {parsedData?.event}</p>\n//       <p style={{ color: urgencyColor }} className=\"urgency\">Urgency: {parsedData?.urgency}</p>\n//     </div>\n//   );\n// };\n\n// export default Card;\n\nimport React from 'react';\nimport './Card.css'; // Import the CSS file for styling\nimport './CircleButton.css';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = ({\n  data,\n  showRedCircle\n}) => {\n  var _parsedData$DEC_RA, _parsedData$DEC_RA2;\n  console.log('showRedCircle in Card:', showRedCircle); // Add this line\n  const parsedData = data ? JSON.parse(data) : undefined;\n  console.log(parsedData === null || parsedData === void 0 ? void 0 : parsedData.time);\n  const urgencyColor = (parsedData === null || parsedData === void 0 ? void 0 : parsedData.urgency) > 4 ? 'red' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: 'gray',\n      position: 'relative'\n    },\n    className: \"card\",\n    children: [showRedCircle && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"red-circle-button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Last simulated event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"telescope-name\",\n      children: [\"Telescope Name:  \", parsedData === null || parsedData === void 0 ? void 0 : parsedData.telescopeName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"time\",\n      children: [\"Time: \", parsedData === null || parsedData === void 0 ? void 0 : parsedData.time]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"coordinates\",\n      children: [\"Coordinates: RA : \", parsedData === null || parsedData === void 0 ? void 0 : (_parsedData$DEC_RA = parsedData.DEC_RA) === null || _parsedData$DEC_RA === void 0 ? void 0 : _parsedData$DEC_RA.ra, \", DEC: \", parsedData === null || parsedData === void 0 ? void 0 : (_parsedData$DEC_RA2 = parsedData.DEC_RA) === null || _parsedData$DEC_RA2 === void 0 ? void 0 : _parsedData$DEC_RA2.dec]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"event\",\n      children: [\"Event: \", parsedData === null || parsedData === void 0 ? void 0 : parsedData.event]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: urgencyColor\n      },\n      className: \"urgency\",\n      children: [\"Urgency: \", parsedData === null || parsedData === void 0 ? void 0 : parsedData.urgency]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_c = Card;\nexport default Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","Link","jsxDEV","_jsxDEV","Card","data","showRedCircle","_parsedData$DEC_RA","_parsedData$DEC_RA2","console","log","parsedData","JSON","parse","undefined","time","urgencyColor","urgency","style","color","position","className","children","fileName","_jsxFileName","lineNumber","columnNumber","telescopeName","DEC_RA","ra","dec","event","_c","$RefreshReg$"],"sources":["/Users/rebeccajacoby/Desktop/big_data_project/BigDataProject/client/src/components/Card.jsx"],"sourcesContent":["// // Card.js\n// import React from 'react';\n\n// const Card = ({ data }) => {\n//   //   const parsedData = JSON.parse(data) \n//   const parsedData = data ? JSON.parse(data) : undefined;\n//   console.log(parsedData?.time);\n//   const urgencyColor = parsedData?.urgency > 4 ? 'red' : '';\n//   return (\n//     <div style={{ color: 'gray' }} className=\"card\" >\n//       <h2>Last simulated event </h2>\n// <p className=\"telescope-name\">Telescope Name:  {parsedData?.telescopeName}</p>\n// <p className=\"time\">Time: {parsedData?.time}</p>\n// <p className=\"coordinates\">\n//   Coordinates: RA : {parsedData?.DEC_RA?.ra}, DEC: {parsedData?.DEC_RA?.dec}\n// </p>\n// <p className=\"event\">Event: {parsedData?.event}</p>\n// <p style={{ color: urgencyColor }} className=\"urgency\">Urgency: {parsedData?.urgency}</p>\n//     </div>\n//   );\n// };\n\n// export default Card;\n\n\n\n\n\n\n\n\n\n// import React from 'react';\n// import './Card.css'; // Import the CSS file for styling\n\n// const Card = ({ data, showRedCircle }) => {\n//   console.log('showRedCircle in Card:', showRedCircle); // Add this line\n//   const parsedData = data ? JSON.parse(data) : undefined;\n//   console.log(parsedData?.time);\n//   const urgencyColor = parsedData?.urgency > 4 ? 'red' : '';\n\n//   return (\n//     <div style={{ color: 'gray', position: 'relative' }} className=\"card\">\n//       {/* Conditionally render the red circle based on the showRedCircle prop */}\n//       {showRedCircle && <div className=\"red-circle\" />}\n//       <h2>Last simulated event</h2>\n//       <p className=\"telescope-name\">Telescope Name:  {parsedData?.telescopeName}</p>\n//       <p className=\"time\">Time: {parsedData?.time}</p>\n//       <p className=\"coordinates\">\n//         Coordinates: RA : {parsedData?.DEC_RA?.ra}, DEC: {parsedData?.DEC_RA?.dec}\n//       </p>\n//       <p className=\"event\">Event: {parsedData?.event}</p>\n//       <p style={{ color: urgencyColor }} className=\"urgency\">Urgency: {parsedData?.urgency}</p>\n//     </div>\n//   );\n// };\n\n// export default Card;\n\n\n\n\nimport React from 'react';\nimport './Card.css'; // Import the CSS file for styling\nimport './CircleButton.css'; \nimport { Link } from 'react-router-dom';\n\nconst Card = ({ data, showRedCircle }) => {\n  console.log('showRedCircle in Card:', showRedCircle); // Add this line\n  const parsedData = data ? JSON.parse(data) : undefined;\n  console.log(parsedData?.time);\n  const urgencyColor = parsedData?.urgency > 4 ? 'red' : '';\n\n  return (\n    <div style={{ color: 'gray', position: 'relative' }} className=\"card\">\n      {/* Conditionally render the red circle based on the showRedCircle prop */}\n      {showRedCircle && <button className=\"red-circle-button\"></button>}\n      <h2>Last simulated event</h2>\n      <p className=\"telescope-name\">Telescope Name:  {parsedData?.telescopeName}</p>\n      <p className=\"time\">Time: {parsedData?.time}</p>\n      <p className=\"coordinates\">\n        Coordinates: RA : {parsedData?.DEC_RA?.ra}, DEC: {parsedData?.DEC_RA?.dec}\n      </p>\n      <p className=\"event\">Event: {parsedData?.event}</p>\n      <p style={{ color: urgencyColor }} className=\"urgency\">Urgency: {parsedData?.urgency}</p>\n    </div>\n  );\n};\n\nexport default Card;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}